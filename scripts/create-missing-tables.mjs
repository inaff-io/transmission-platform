import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'
import fs from 'fs'
import pg from 'pg'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const projectRoot = join(__dirname, '..')

// Load environment variables from .env.local
const envPath = join(projectRoot, '.env.local')
if (fs.existsSync(envPath)) {
  const envConfig = dotenv.parse(fs.readFileSync(envPath))
  for (const key in envConfig) {
    process.env[key] = envConfig[key]
  }
}

console.log('üöÄ Criando tabelas links e abas via conex√£o direta...\n')

const connectionString = process.env.POSTGRES_URL || process.env.DATABASE_URL

if (!connectionString) {
  console.error('‚ùå POSTGRES_URL ou DATABASE_URL n√£o encontrada')
  process.exit(1)
}

const { Client } = pg

async function main() {
  const client = new Client({
    connectionString,
    ssl: { rejectUnauthorized: false }
  })

  try {
    console.log('üì° Conectando ao banco...')
    await client.connect()
    console.log('‚úÖ Conectado!\n')

    // Criar tabela links
    console.log('üìù Criando tabela links...')
    await client.query(`
      CREATE TABLE IF NOT EXISTS links (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        tipo TEXT CHECK (tipo IN ('transmissao','programacao')),
        url TEXT NOT NULL,
        ativo_em TIMESTAMP DEFAULT NOW(),
        atualizado_em TIMESTAMP DEFAULT NOW(),
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
    `)
    console.log('‚úÖ Tabela links criada')

    // Criar √≠ndices para links
    console.log('üìù Criando √≠ndices para links...')
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_links_tipo ON links(tipo);
      CREATE INDEX IF NOT EXISTS idx_links_ativo_em ON links(ativo_em DESC);
      CREATE INDEX IF NOT EXISTS idx_links_atualizado_em ON links(atualizado_em DESC);
    `)
    console.log('‚úÖ √çndices criados')

    // Criar tabela abas
    console.log('üìù Criando tabela abas...')
    await client.query(`
      CREATE TABLE IF NOT EXISTS abas (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        nome TEXT NOT NULL UNIQUE,
        habilitada BOOLEAN DEFAULT FALSE,
        criado_em TIMESTAMP DEFAULT NOW(),
        atualizado_em TIMESTAMP DEFAULT NOW()
      );
    `)
    console.log('‚úÖ Tabela abas criada')

    // Inserir abas padr√£o
    console.log('üìù Inserindo abas padr√£o...')
    await client.query(`
      INSERT INTO abas (nome, habilitada) VALUES
        ('programacao', TRUE),
        ('materiais', FALSE),
        ('chat', FALSE),
        ('qa', FALSE)
      ON CONFLICT (nome) DO NOTHING;
    `)
    console.log('‚úÖ Abas padr√£o inseridas')

    // Inserir link de exemplo
    console.log('üìù Verificando links...')
    const { rows } = await client.query(`SELECT COUNT(*) FROM links WHERE tipo = 'transmissao'`)
    if (parseInt(rows[0].count) === 0) {
      await client.query(`
        INSERT INTO links (tipo, url) VALUES
          ('transmissao', 'https://www.youtube.com/embed/DtyBnYuAsJY')
      `)
      console.log('‚úÖ Link de transmiss√£o de exemplo inserido')
    } else {
      console.log('‚ÑπÔ∏è  Links j√° existem')
    }

    console.log('\n‚ú® Banco de dados configurado com sucesso!\n')
  } catch (err) {
    console.error('\n‚ùå Erro:', err.message)
    console.error('Detalhes:', err)
    process.exit(1)
  } finally {
    await client.end()
  }
}

main()
